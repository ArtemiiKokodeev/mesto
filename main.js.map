{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto/./src/components/FormValidator.js","webpack://mesto/./src/components/Card.js","webpack://mesto/./src/components/Section.js","webpack://mesto/./src/components/Popup.js","webpack://mesto/./src/components/PopupWithImage.js","webpack://mesto/./src/components/PopupWithForm.js","webpack://mesto/./src/components/UserInfo.js","webpack://mesto/./src/utils/constants.js","webpack://mesto/./src/pages/index.js"],"sourcesContent":["// Определение класса валидатора,\n// используется в index.js при создании экземпляров для двух форм - EditProfile и AddCard\n\nexport default class FormValidator {\n  constructor(popupClassObject, formElement) {\n    this._popupClassObject = popupClassObject;\n    this._formElement = formElement;\n\n    this._inputList = Array.from(this._formElement.querySelectorAll(this._popupClassObject.inputSelector));\n    this._buttonElement = this._formElement.querySelector(this._popupClassObject.submitButtonSelector);\n  };\n\n  // Приватная функция показа ошибок при валидации инпутов\n\n  _showInputError(inputElement, errorMessage) {\n    const errorElement = this._formElement.querySelector(`.${inputElement.id}-error`);\n    inputElement.classList.add(this._popupClassObject.inputErrorClass);\n    errorElement.textContent = errorMessage;\n    errorElement.classList.add(this._popupClassObject.errorClass);\n  };\n\n  // Приватная функция очистки ошибок при валидации инпутов\n\n  _hideInputError(inputElement) {\n    const errorElement = this._formElement.querySelector(`.${inputElement.id}-error`);\n    inputElement.classList.remove(this._popupClassObject.inputErrorClass);\n    errorElement.classList.remove(this._popupClassObject.errorClass);\n    errorElement.textContent = '';\n  };\n\n  // Приватная функция проверки валидности инпутов и показа/очистки ошибок\n\n  _checkInputValidity(inputElement) {\n    if (!inputElement.validity.valid) {\n      this._showInputError(inputElement, inputElement.validationMessage);\n    } else {\n      this._hideInputError(inputElement);\n    }\n  };\n\n  // Приватная функция старта валидации форм,\n  // используется в публичном методе enableValidation\n\n  _setEventListeners() {\n\n    this._toggleButtonState();\n\n    this._inputList.forEach((inputElement) => {\n      inputElement.addEventListener('input', () => {\n        this._checkInputValidity(inputElement);\n        this._toggleButtonState();\n      });\n    });\n  };\n\n\n  // Публичная функция старта валидации форм,\n  // вызываем в index.js у экземпляров класса FormValidator\n  // для двух форм - EditProfile и AddCard\n\n  enableValidation() {\n      this._setEventListeners();\n  };\n\n  // Публичная функция очистки подсказок об ошибках при открытии попапа,\n  // вызываем в index.js в функциях открытия попапов EditProfile и AddCard\n\n  resetValidation() {\n    this._toggleButtonState();\n\n    this._inputList.forEach((inputElement) => {\n      this._hideInputError(inputElement)\n    });\n\n  }\n\n  // Приватная функция поиска хотя бы одной ошибки валидации инпутов,\n  // возвращает значение true/false\n\n  _hasInvalidInput() {\n    return this._inputList.some((inputElement) => {\n      return !inputElement.validity.valid;\n    })\n  };\n\n  // Приватная функция переключения в неактивное состояние кнопки сабмита при добавления новой карточки\n\n  _disabledButton() {\n    this._buttonElement.classList.add(this._popupClassObject.inactiveButtonClass);\n    this._buttonElement.setAttribute('disabled', true);\n  };\n\n  // Приватная функция проверки валидности инпутов\n  // и переключения в активное/неактивное состояние кнопки сабмита при добавления новой карточки\n\n  _toggleButtonState() {\n    if (this._hasInvalidInput()) {\n      this._disabledButton();\n    } else {\n      this._buttonElement.classList.remove(this._popupClassObject.inactiveButtonClass);\n      this._buttonElement.removeAttribute('disabled');\n    };\n  };\n};\n","// Определение класса карточки,\n// используется в index.js в функции генерации 6 карточек из стандартного массива\n// и функции создания новых карточек в форме AddCard\n\nexport default class Card {\n  constructor(name, link, cardSelector, openPopup) {\n    this._name = name;\n    this._link = link;\n    this._cardSelector = cardSelector;\n    this._handleCardClick = openPopup;\n  };\n\n\n  // Шаблон добавления карточки\n\n  _getTemplate() {\n    const cardElement = document\n    .querySelector(this._cardSelector)\n    .content\n    .querySelector('.element')\n    .cloneNode(true);\n\n    return cardElement;\n  }\n\n    // Слушатели событий\n\n    _eventListeners() {\n      // Удаление карточки\n\n      this._delete.addEventListener('click', () => {\n        this._handleDeleteElement();\n      });\n\n      // Лайк карточки\n\n      this._like.addEventListener('click', () => {\n        this._handleLikeElement();\n      });\n\n      // Открытие картинки\n\n      this._image.addEventListener('click', () => {\n        this._handleCardClick(this._name, this._link);\n      });\n    };\n\n\n    // Обработчик клика на кнопку удаления карточки\n\n  _handleDeleteElement() {\n    this._element.remove();\n    this._element = null;\n    };\n\n      // Обработчик клика на кнопку лайка карточки\n\n  _handleLikeElement() {\n    this._like.classList.toggle('element__like-button_active');\n    };\n\n      // Обработчик клика на картинку\n\n//   _handleOpenImage() {\n//    this._handleCardClick(this._name, this._link);\n//  }\n\n\n    // Геренация карточки\n\n  generateCard() {\n    this._element = this._getTemplate();\n    this._like = this._element.querySelector('.element__like-button');\n    this._delete = this._element.querySelector('.element__delete-button');\n    this._image = this._element.querySelector('.element__image');\n\n    this._eventListeners();\n\n    this._element.querySelector('.element__title').textContent = this._name;\n    this._image.alt = this._name;\n    this._image.src = this._link;\n\n    return this._element;\n  };\n};\n","// Класс отвечает за отрисовку элементов (карточек) на странице\n\n// Первым параметром конструктора принимает объект.\n// Свойство renderer — это функция,\n// которая отвечает за создание и отрисовку данных на странице.\n\n// Второй параметр конструктора — селектор контейнера,\n// в который нужно добавлять созданные элементы.\n\n\nexport default class Section {\n  constructor({ renderer } , containerSelector) {\n    this._renderer = renderer;\n    this._containerSelector = containerSelector;\n    this._container = document.querySelector(this._containerSelector);\n  }\n\n  // Содержит публичный метод, который отвечает\n  // за отрисовку всех элементов. Отрисовка каждого отдельного элемента\n  // должна осуществляться функцией renderer.\n\n  renderItems(items) {\n    items.forEach((item) => {\n      this._renderer(item);\n    });\n  };\n\n  // Содержит публичный метод addItem,\n  // который принимает DOM-элемент и добавляет его в контейнер.\n\n  addItem(element) {\n    this._container.prepend(element);\n  };\n};\n","// Класс отвечает за открытие и закрытие попапа\n\n// Принимает в конструктор единственный параметр — селектор попапа.\n\n\nexport default class Popup {\n  constructor(popupSelector) {\n    this._popupSelector = popupSelector;\n    this._popup = document.querySelector(this._popupSelector);\n    this._closeButton = this._popup.querySelector('.popup__close');\n    this._handleEscClose = this._handleEscClose.bind(this);\n  }\n\n\n// Содержит публичные методы open и close,\n// которые отвечают за открытие и закрытие попапа.\n\n  open() {\n    this._popup.classList.add('popup_opened');\n    document.addEventListener('keyup', this._handleEscClose);\n  }\n\n  close() {\n    //console.log('original close')\n    this._popup.classList.remove('popup_opened');\n    document.removeEventListener('keyup', this._handleEscClose);\n  }\n\n\n  // Содержит приватный метод _handleEscClose,\n  // который содержит логику закрытия попапа клавишей Esc.\n\n  _handleEscClose(evt) {\n    if (evt.key === 'Escape') {\n      this.close();\n    };\n  };\n\n  // Содержит публичный метод setEventListeners, который добавляет слушатель клика иконке закрытия попапа.\n  // Модальное окно также закрывается при клике на затемнённую область вокруг формы.\n\n\n  setEventListeners() {\n    this._closeButton.addEventListener('click', () => this.close());\n\n    this._popup.addEventListener('mousedown', (evt) => {\n      if (evt.target === evt.currentTarget) {\n      this.close();\n      };\n    });\n  };\n}\n","// Класс наследует от Popup\n\nimport Popup from './Popup.js';\n\nexport default class PopupWithImage extends Popup {\n\tconstructor(popupSelector) {\n    super(popupSelector);\n    this._name = this._popup.querySelector('.popup__place-name');\n    this._image = this._popup.querySelector('.popup__image');\n\t}\n\n  open(name, link) {\n    super.open();\n\n    this._name.textContent = name;\n    this._image.src = link;\n    this._image.alt = name;\n  }\n}\n","// Класс наследует от Popup, кроме селектора попапа принимает в конструктор колбэк сабмита формы\nimport Popup from './Popup.js';\n\nexport default class PopupWithForm extends Popup {\n\tconstructor({popupSelector, handleFormSubmit}) {\n    super(popupSelector);\n    this._handleFormSubmit = handleFormSubmit;\n    this._form = this._popup.querySelector('.popup__content');\n    this._inputList = Array.from(this._popup.querySelectorAll('.popup__text'));\n    //console.log(this._inputList);\n  }\n\n  // Содержит приватный метод _getInputValues,\n  // который собирает данные всех полей формы.\n\n  _getInputValues() {\n    this._formValues = {};\n    this._inputList.forEach((input) => {\n      this._formValues[input.name] = input.value\n    });\n    console.log('getInpitValues', this._formValues);\n    return this._formValues;\n  }\n\n\n  // Перезаписывает родительский метод setEventListeners.\n  // Метод setEventListeners класса PopupWithForm должен не только\n  // добавлять обработчик клика иконке закрытия, но и добавлять обработчик сабмита формы.\n\n  setEventListeners() {\n    super.setEventListeners();\n    this._form.addEventListener('submit', (evt) => {\n      evt.preventDefault();\n      this._handleFormSubmit(this._getInputValues());\n    });\n  }\n\n  // Перезаписывает родительский метод close, так как при закрытии попапа\n  // форма должна ещё и сбрасываться.\n\n  close() {\n    //console.log('overloaded close')\n    super.close();\n    this._form.reset();\n  }\n\n}\n\n","// Класс UserInfo отвечает за управление отображением\n// информации о пользователе на странице\n\n// Принимает в конструктор объект с селекторами двух элементов:\n// элемента имени пользователя и элемента информации о себе.\n\nexport default class UserInfo {\n\tconstructor({nameSelector, occupationSelector}) {\n    this._nameSelector = nameSelector;\n    this._occupationSelector = occupationSelector;\n    this._name = document.querySelector(this._nameSelector);\n    this._occupation = document.querySelector(this._occupationSelector);\n  }\n\n  // Содержит публичный метод getUserInfo, который возвращает объект\n  // с данными пользователя. Этот метод пригодится когда данные\n  // пользователя нужно будет подставить в форму при открытии.\n\n  getUserInfo() {\n    const info = {\n      name: this._name.textContent,\n      occupation: this._occupation.textContent\n    };\n    //console.log('getUserInfo', info);\n    return info;\n  }\n\n  // Содержит публичный метод setUserInfo, который принимает\n  // новые данные пользователя и добавляет их на страницу.\n\n  setUserInfo(values) {\n    console.log('setUserInfo', values)\n    this._name.textContent = values.userName;\n    this._occupation.textContent = values.userOccupation;\n  }\n}\n\n","// Попап редактирования профиля\nexport const formEditProfile = document.forms.userInfoForm;\nexport const formEditProfileOpenButton = document.querySelector('.profile__edit-button');\nexport const nameInput = document.querySelector('.popup__text_type_name');\nexport const occupationInput = document.querySelector('.popup__text_type_occupation');\n\n// Попап добавления карточки\nexport const formAddCard = document.forms.addCardForm;\nexport const formAddCardOpenButton = document.querySelector('.profile__add-button');\n\n// Исходный массив карточек\nexport const initialCards = [\n  {\n    name: 'Архыз',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg'\n  },\n  {\n    name: 'Челябинская область',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg'\n  },\n  {\n    name: 'Иваново',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg'\n  },\n  {\n    name: 'Камчатка',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg'\n  },\n  {\n    name: 'Холмогорский район',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg'\n  },\n  {\n    name: 'Байкал',\n    link: 'https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg'\n  }\n];\n\n// Объект настроек с селекторами и классами формы для валидации\nexport const popupClassObject = {\n  formSelector: '.popup__content',\n  inputSelector: '.popup__text',\n  submitButtonSelector: '.popup__submit',\n  inactiveButtonClass: 'popup__submit_inactive',\n  inputErrorClass: 'popup__text_type_error',\n  errorClass: 'popup__text-error_active'\n};\n","import FormValidator from '../components/FormValidator.js';\nimport Card from '../components/Card.js';\nimport Section from '../components/Section.js';\nimport PopupWithImage from '../components/PopupWithImage.js';\nimport PopupWithForm from '../components/PopupWithForm.js';\nimport UserInfo from '../components/UserInfo.js';\nimport './index.css';\n\nimport {\n  formEditProfile,\n  formEditProfileOpenButton,\n  nameInput,\n  occupationInput,\n  formAddCard,\n  formAddCardOpenButton,\n  initialCards,\n  popupClassObject\n} from '../utils/constants.js';\n\n\n// Создание экземпляра класса UserInfo (управление отображением\n// информации о пользователе)\n\nconst userInformation = new UserInfo({\n  nameSelector: '.profile__name',\n  occupationSelector: '.profile__occupation'\n})\n\n\n\n// Создание экземпляра класса попапа PopupWithForm\n// при открытии формы редактирования профиля EditProfile\n\nconst popupEditProfile = new PopupWithForm({\n  popupSelector: '.popup_edit-profile',\n  handleFormSubmit: (values) => {\n    userInformation.setUserInfo(values);\n    popupEditProfile.close();\n  }\n});\n\npopupEditProfile.setEventListeners();\n\n\n// Слушатель открытия попапа EditProfile\n\nformEditProfileOpenButton.addEventListener('click', () => {\n  const profileFormValues = userInformation.getUserInfo();\n  //console.log(profileFormValues);\n  nameInput.value = profileFormValues.name;\n  occupationInput.value = profileFormValues.occupation;\n\n  formEditProfileValidator.resetValidation();\n  popupEditProfile.open();\n});\n\n\n\n// Создание экземпляра класса попапа при открытии карточки\n\nconst popupOpenCardWithImage = new PopupWithImage('.popup_open-card');\npopupOpenCardWithImage.setEventListeners();\n\n\n// Функция открытия карточки с методом open класса PopupWithImage\n\nfunction handleCardClick (name, link) {\n  popupOpenCardWithImage.open(name, link)}\n\n\n\n// Создание экземпляра класса попапа PopupWithForm\n// при открытии формы добавления новой карточки AddCard\n\nconst popupAddNewCard = new PopupWithForm({\n  popupSelector: '.popup_add-card',\n  handleFormSubmit: (item) => {\n    cardRenderer.addItem(createCard(item));\n    popupAddNewCard.close();\n    }\n  })\n\n  popupAddNewCard.setEventListeners();\n\n\n  // Слушатель открытия попапа AddCard\n\n  formAddCardOpenButton.addEventListener('click', () => {\n    formAddCard.reset();\n    formAddCardValidator.resetValidation();\n    popupAddNewCard.open();\n  });\n\n\n\n// Создание экземпляра класса Section\n// (отрисовка карточек на странице)\n\nconst cardRenderer = new Section({\n  renderer: (item) => {\n    cardRenderer.addItem(createCard(item))\n    }\n  },\n  '.elements__list'\n);\n\ncardRenderer.renderItems(initialCards);\n\n\n\n// Генерация и возврат готовой карточки\n\nfunction createCard(item) {\n  const card = new Card(\n    item.name,\n    item.link,\n    '.elements-template',\n    handleCardClick);\n  const cardElement = card.generateCard();\n  return cardElement\n}\n\n\n\n// Валидация форм\n\nconst formEditProfileValidator = new FormValidator(popupClassObject, formEditProfile);\nformEditProfileValidator.enableValidation();\n\nconst formAddCardValidator = new FormValidator(popupClassObject, formAddCard);\nformAddCardValidator.enableValidation();\n"],"names":["FormValidator","popupClassObject","formElement","this","_popupClassObject","_formElement","_inputList","Array","from","querySelectorAll","inputSelector","_buttonElement","querySelector","submitButtonSelector","inputElement","errorMessage","errorElement","id","classList","add","inputErrorClass","textContent","errorClass","remove","validity","valid","_hideInputError","_showInputError","validationMessage","_toggleButtonState","forEach","addEventListener","_checkInputValidity","_setEventListeners","some","inactiveButtonClass","setAttribute","_hasInvalidInput","_disabledButton","removeAttribute","Card","name","link","cardSelector","openPopup","_name","_link","_cardSelector","_handleCardClick","document","content","cloneNode","_delete","_handleDeleteElement","_like","_handleLikeElement","_image","_element","toggle","_getTemplate","_eventListeners","alt","src","Section","containerSelector","renderer","_renderer","_containerSelector","_container","items","item","element","prepend","Popup","popupSelector","_popupSelector","_popup","_closeButton","_handleEscClose","bind","removeEventListener","evt","key","close","target","currentTarget","PopupWithImage","PopupWithForm","handleFormSubmit","_handleFormSubmit","_form","_formValues","input","value","console","log","preventDefault","_getInputValues","reset","UserInfo","nameSelector","occupationSelector","_nameSelector","_occupationSelector","_occupation","occupation","values","userName","userOccupation","formEditProfile","forms","userInfoForm","formEditProfileOpenButton","nameInput","occupationInput","formAddCard","addCardForm","formAddCardOpenButton","formSelector","userInformation","popupEditProfile","setUserInfo","setEventListeners","profileFormValues","getUserInfo","formEditProfileValidator","resetValidation","open","popupOpenCardWithImage","handleCardClick","popupAddNewCard","cardRenderer","addItem","createCard","formAddCardValidator","generateCard","renderItems","enableValidation"],"sourceRoot":""}